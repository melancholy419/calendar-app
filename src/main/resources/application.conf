

akka.kafka.producer{
      kafka-clients{
        bootstrap.servers = "localhost:9094"
      }

}

datastax-java-driver {
      basic.session-keyspace = calendar_app
      basic.config-reload-interval = 5 minutes

      basic.request {
        timeout = 2 seconds
        consistency = LOCAL_ONE
        page-size = 5000
        serial-consistency = SERIAL
        default-idempotence = false
      }
      basic.load-balancing-policy {
        class = DefaultLoadBalancingPolicy
        slow-replica-avoidance = true
      }
      advanced.session-leak.threshold = 4

      advanced.connection {
        connect-timeout = 5 seconds
        init-query-timeout = 5 seconds
        set-keyspace-timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
        pool {
          local.size = 1
          remote.size = 1
        }
        max-requests-per-connection = 1024
        max-orphan-requests = 256
        warn-on-init-error = true
      }
      advanced.load-balancing-policy {
        dc-failover {
          max-nodes-per-remote-dc = 0
          allow-for-local-consistency-levels = false
        }
      }
      advanced.reconnect-on-init = false
      advanced.reconnection-policy {
        class = ExponentialReconnectionPolicy
        base-delay = 1 second
        max-delay = 60 seconds
      }
      advanced.retry-policy {
        class = DefaultRetryPolicy
      }
      advanced.speculative-execution-policy {
        class = NoSpeculativeExecutionPolicy
      }
      advanced.auth-provider {
        class = PlainTextAuthProvider
        username = cassandra
        password = cassandra
      }
      advanced.timestamp-generator {
        class = AtomicTimestampGenerator
        drift-warning {
          threshold = 1 second
          interval = 10 seconds
        }
        force-java-clock = false
      }

      advanced.throttler {
        class = PassThroughRequestThrottler
      }
      advanced.address-translator {
        class = PassThroughAddressTranslator
      }
      advanced.resolve-contact-points = true

      advanced.protocol {
        max-frame-length = 256 MiB
      }

      advanced.request {
        warn-if-set-keyspace = true

        trace {
          attempts = 5
          interval = 3 milliseconds
          consistency = ONE
        }
        log-warnings = true
      }

      advanced.graph {
        paging-enabled = "AUTO"


        paging-options {
          page-size = ${datastax-java-driver.advanced.continuous-paging.page-size}
          max-pages = ${datastax-java-driver.advanced.continuous-paging.max-pages}
          max-pages-per-second = ${datastax-java-driver.advanced.continuous-paging.max-pages-per-second}
          max-enqueued-pages = ${datastax-java-driver.advanced.continuous-paging.max-enqueued-pages}
        }
      }

      # Continuous paging (DataStax Enterprise only)
      advanced.continuous-paging {
        page-size = ${datastax-java-driver.basic.request.page-size}
        page-size-in-bytes = false
        max-pages = 0
        max-pages-per-second = 0
        max-enqueued-pages = 4
        timeout {
          first-page = 2 seconds
          other-pages = 1 second

        }
      }

      advanced.monitor-reporting {
        enabled = true
      }

      advanced.metrics {
        factory {
          class = DefaultMetricsFactory
        }
        id-generator {
          class = DefaultMetricIdGenerator
        }
        session {
          cql-requests {
            highest-latency = 3 seconds
            lowest-latency = 1 millisecond
            significant-digits = 3
            refresh-interval = 5 minutes
          }

          # Required: if the 'throttling.delay' metric is enabled, and Dropwizard or Micrometer is used.
          # Modifiable at runtime: no
          # Overridable in a profile: no
          throttling.delay {
            highest-latency = 3 seconds
            lowest-latency = 1 millisecond
            significant-digits = 3
            refresh-interval = 5 minutes
            // slo = [ 100 milliseconds, 500 milliseconds, 1 second ]
          }

          continuous-cql-requests {
            highest-latency = 120 seconds
            lowest-latency = 10 milliseconds
            significant-digits = 3
            refresh-interval = 5 minutes
            // slo = [ 100 milliseconds, 500 milliseconds, 1 second ]
          }
          graph-requests {
            highest-latency = 12 seconds
            lowest-latency = 1 millisecond
            significant-digits = 3
            refresh-interval = 5 minutes
            // slo = [ 100 milliseconds, 500 milliseconds, 1 second ]
          }
        }
        node {
          cql-messages {
            highest-latency = 3 seconds
            lowest-latency = 1 millisecond
            significant-digits = 3
            refresh-interval = 5 minutes
          }
          graph-messages {
            highest-latency = 3 seconds
            lowest-latency = 1 millisecond
            significant-digits = 3
            refresh-interval = 5 minutes
            // slo = [ 100 milliseconds, 500 milliseconds, 1 second ]
          }
          expire-after = 1 hour
        }
      }

      advanced.socket {
        tcp-no-delay = true
      }
      advanced.heartbeat {
        interval = 30 seconds
        timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
      }

      advanced.metadata {
        topology-event-debouncer {
          window = 1 second
          max-events = 20
        }
        schema {
          enabled = true
          refreshed-keyspaces = [ "!system", "!/^system_.*/", "!/^dse_.*/", "!solr_admin", "!OpsCenter" ]
          request-timeout = ${datastax-java-driver.basic.request.timeout}
          request-page-size = ${datastax-java-driver.basic.request.page-size}
          debouncer {
            window = 1 second
            max-events = 20
          }
        }
        token-map.enabled = true
      }

      advanced.control-connection {
        timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
        schema-agreement {
          interval = 200 milliseconds
          timeout = 10 seconds
          warn-on-failure = true
        }
      }

      advanced.prepared-statements {
        prepare-on-all-nodes = true
        reprepare-on-up {
          enabled = true
          check-system-table = false
          max-statements = 0
          max-parallelism = 100
          timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
        }
      }
      advanced.netty {
        daemon = false
        io-group {
          size = 0
          shutdown {quiet-period = 2, timeout = 15, unit = SECONDS}
        }
        admin-group {
          size = 2

          shutdown {quiet-period = 2, timeout = 15, unit = SECONDS}
        }
        timer {
          tick-duration = 100 milliseconds
          ticks-per-wheel = 2048
        }
      }
      advanced.coalescer {
        reschedule-interval = 10 microseconds
      }
    }

